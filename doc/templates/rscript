#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import shutil
import lib_raise_c as C
import lib_raise_linker as Linker
import lib_raise_fs as FS
import lib_raise_libraries as Libraries
import lib_raise_os as OS
import lib_raise_process as Process


def setup():
	if os.path.isdir('example'):
		shutil.rmtree('example')
	os.mkdir('example')

	if os.path.isdir('new_example'):
		shutil.rmtree('new_example')

	if os.path.islink('example_link'):
		os.unlink('example_link')

	if os.path.isfile('one'):
		os.remove('one')

	if os.path.isfile('two'):
		os.remove('two')

	open('one', 'a').close()

'''
File Systems
'''

def fs_change_dir():
	FS.change_dir('example')

def fs_move_file():
	FS.move_file('one', 'two')

def fs_copy_file():
	FS.copy_file('one', 'two')

def fs_copy_new_file():
	FS.copy_new_file('one', 'two')

def fs_copy_dir():
	FS.copy_dir('example', 'new_example', symlinks = False)

def fs_make_dir():
	FS.make_dir('example', ignore_failure = True)

def fs_remove_dir():
	FS.remove_dir('example', and_children = True)

def fs_remove_file():
	FS.remove_file('does_not_exist', ignore_failure = True)

def fs_remove_binaries():
	FS.remove_binaries('main')

def fs_symlink():
	FS.symlink('example', 'example_link')

'''
 C
'''

def c_compilers():
	cc = C.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))

	cc = C.c_compilers['clang']

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))


def c_compiler_setup():
	# Get a C compiler
	cc = C.get_default_compiler()

	# Compiler setup
	cc.debug = True
	cc.optimize = True
	cc.warnings_all = True
	cc.warnings_as_errors = True
	cc.compile_time_flags = ['SDL=true']

	# Save the compiler config in environmental variables
	C.save_compiler(cc)

	# Print environmental variables to see what happens under the hood
	print("$CC: {0}".format(os.environ['CC']))
	print("$CFLAGS: {0}".format(os.environ['CFLAGS']))

def c_building_object():
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	C.build_object('main.o', ['main.c'])


