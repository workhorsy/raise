#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import shutil
import lib_raise_c as C
import lib_raise_cxx as CXX
import lib_raise_ar as AR
import lib_raise_d as D
import lib_raise_csharp as CS
import lib_raise_java as Java
import lib_raise_linker as Linker
import lib_raise_fs as FS
import lib_raise_find as Find
import lib_raise_python as Python
import lib_raise_users as Users
import lib_raise_process as Process
import lib_raise_cpu as CPU
import lib_raise_terminal as Terminal
import lib_raise_helpers as Helpers

import osinfo


def cleanup():
	for entry in ['example', 'new_example']:
		if os.path.isdir(entry):
			shutil.rmtree(entry)

	if os.path.islink('example_link'):
		os.unlink('example_link')

	for entry in ['one', 'two', 'main', 'libsubtract.di']:
		if os.path.isfile(entry):
			os.remove(entry)

	for entry in ['libexample', 'libadd', 'libsubtract', 'main', 'math_helper', 'lib_math']:
		FS.remove_binaries(entry)

def setup():
	cleanup()

	open('one', 'a').close()
	os.mkdir('example')

'''
Users
'''

def operating_system_support():
	import osinfo

	# Print the OS info
	os_type, os_brand, os_release, os_kernel = osinfo.get_os_info()
	print("Type: {0}".format(os_type))
	print("Brand: {0}".format(os_brand))
	print("Release: {0}".format(os_release))
	print("Kernel: {0}".format(os_kernel))

	# Run code depending on the OS
	if os_type in osinfo.OSType.Linux:
		print("You're on Linux")
	elif os_type in osinfo.OSType.Windows:
		if os_brand in osinfo.OSBrand.WindowsXP:
			print("Sorry, Windows XP is not supported")

'''
installation
'''

def installation():
	modules = []
	for root, dirs, files in os.walk('../../lib_raise'):
		for entry in files:
			if entry.endswith('.py'):
				modules.append(entry)

	modules.sort()

	print('.lib_raise-+')
	for module in modules[:-1]:
		print('           |-{0}'.format(module))
	print('           `-{0}'.format(modules[-1]))

'''
File Systems
'''

def fs_change_dir():
	FS.change_dir('example')

def fs_move_file():
	FS.move_file('one', 'two')

def fs_copy_file():
	FS.copy_file('one', 'two')

def fs_copy_new_file():
	FS.copy_new_file('one', 'two')

def fs_copy_dir():
	FS.copy_dir('example', 'new_example', symlinks = False)

def fs_make_dir():
	FS.make_dir('example', ignore_failure = True)

def fs_remove_dir():
	FS.remove_dir('example', and_children = True)

def fs_remove_file():
	FS.remove_file('does_not_exist', ignore_failure = True)

def fs_remove_binaries():
	FS.remove_binaries('main')

def fs_symlink():
	FS.symlink('example', 'example_link')

'''
 C
'''

def c_compilers():
	cc = C.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))

	cc = C.c_compilers['clang']

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))


def c_compiler_setup():
	# Get a C compiler
	cc = C.get_default_compiler()

	# Compiler setup
	cc.debug = True
	cc.standard = C.Standard.std2011
	cc.position_independent_code = True
	cc.optimize_level = 2
	cc.warnings_all = True
	cc.warnings_extra = True
	cc.warnings_as_errors = True
	cc.compile_time_flags = ['SDL=true']

	# Print environmental variables to see what happens under the hood
	print("$CC: {0}".format(cc.cc))
	print("$CFLAGS: {0}".format(cc.cflags))

def c_building_object():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the object
	cc.build_object('main.o', ['main.c'])

def c_building_program():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the program
	cc.build_program('main.exe', ['main.c'])

def c_building_library():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the library into an object
	cc.build_object('libexample.o', ['libexample.c'])

	# Build the library as a shared and static library
	cc.build_shared_library('libexample.so', ['libexample.o'])
	AR.build_static_library('libexample.a', ['libexample.o'])


def c_program_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the program
	cc.build_program('main.exe', ['main.c'])

	# Install the program
	C.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the C program from the system
	C.run_print('main.exe')

	# Uninstall the program
	C.uninstall_program('main.exe')

def c_library_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the library
	cc.build_object('libexample.o', ['libexample.c'])
	cc.build_shared_library('libexample.so', ['libexample.o'])

	# Install the library
	C.install_library('libexample.so')

	# Uninstall the library
	C.uninstall_library('libexample.so')

def c_header_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Install the header
	C.install_header('libexample.h')

	# Uninstall the header
	C.uninstall_header('libexample.h')

def c_running_and_printing():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Build the program
	cc.build_program('main.exe', ['main.c'])

	# Run the C program
	C.run_print('./main.exe')

'''
 C++
'''

def cxx_compilers():
	cxx = CXX.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(cxx._name))
	print("path: {0} ".format(cxx._path))

	cxx = CXX.cxx_compilers['clang++']

	# Print the compiler name and path for fun
	print("name: {0}".format(cxx._name))
	print("path: {0} ".format(cxx._path))

def cxx_compiler_setup():
	# Get a C++ compiler
	cxx = CXX.get_default_compiler()

	# Compiler setup
	cxx.debug = True
	cxx.standard = CXX.Standard.std2011
	cxx.position_independent_code = True
	cxx.optimize_level = 2
	cxx.warnings_all = True
	cxx.warnings_extra = True
	cxx.warnings_as_errors = True
	cxx.compile_time_flags = ['SDL=true']

	# Print environmental variables to see what happens under the hood
	print("$CXX: {0}".format(cxx.cxx))
	print("$CXXFLAGS: {0}".format(cxx.cxxflags))

def cxx_building_object():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the object
	cxx.build_object('main.o', ['main.cc'])

def cxx_building_program():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the program
	cxx.build_program('main.exe', ['main.cc'])

def cxx_building_library():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the library into an object
	cxx.build_object('libadd.o', ['libadd.cc'])

	# Build the library as a shared and static library
	cxx.build_shared_library('libadd.so', ['libadd.o'])
	AR.build_static_library('libadd.a', ['libadd.o'])


def cxx_program_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the program
	cxx.build_program('main.exe', ['main.cc'])

	# Install the program
	CXX.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the C++ program from the system
	CXX.run_print('main.exe')

	# Uninstall the program
	CXX.uninstall_program('main.exe')

def cxx_library_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the library
	cxx.build_object('libadd.o', ['libadd.cc'])
	cxx.build_shared_library('libadd.so', ['libadd.o'])

	# Install the library
	CXX.install_library('libadd.so')

	# Uninstall the library
	CXX.uninstall_library('libadd.so')

def cxx_header_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Install the header
	CXX.install_header('libadd.h')

	# Uninstall the header
	CXX.uninstall_header('libadd.h')

def cxx_running_and_printing():
	# Get and setup the C++ compiler
	cxx = CXX.get_default_compiler()
	cxx.debug = True

	# Build the program
	cxx.build_program('main.exe', ['main.cc'])

	# Run the C++ program
	CXX.run_print('./main.exe')

'''
 D
'''

def d_compilers():
	dc = D.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(dc._name))
	print("path: {0} ".format(dc._path))

	dc = D.d_compilers['ldc2']

	# Print the compiler name and path for fun
	print("name: {0}".format(dc._name))
	print("path: {0} ".format(dc._path))

def d_compiler_setup():
	# Get a D compiler
	dc = D.get_default_compiler()

	# Compiler setup
	dc.debug = True
	dc.optimize = True
	dc.warnings_all = True
	dc.unittest = True
	dc.compile_time_flags = ['SDL=true']

	# Print environmental variables to see what happens under the hood
	print("$DC: {0}".format(dc.dc))
	print("$DFLAGS: {0}".format(dc.dflags))

def d_building_object():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the object
	dc.build_object('main.o', ['main.d'])

def d_building_program():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the program
	dc.build_program('main.exe', ['main.d'])

def d_building_library():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the library
	dc.build_object('libsubtract.o', ['libsubtract.d'])
	dc.build_static_library('libsubtract.a', ['libsubtract.o'])

def d_building_interface():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the interface
	dc.build_interface('libsubtract.d')

def d_program_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the program
	dc.build_program('main.exe', ['main.d'])

	# Install the program
	D.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the D program from the system
	D.run_print('main.exe')

	# Uninstall the program
	D.uninstall_program('main.exe')

def d_library_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the library
	dc.build_object('libsubtract.o', ['libsubtract.d'])
	dc.build_static_library('libsubtract.a', ['libsubtract.o'])

	# Install the library
	D.install_library('libsubtract.a')

	# Uninstall the library
	D.uninstall_library('libsubtract.a')

def d_interface_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the interface
	dc.build_interface('libsubtract.d')

	# Install the interface
	D.install_interface('libsubtract.di')

	# Uninstall the interface
	D.uninstall_interface('libsubtract.di')

def d_running_and_printing():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True

	# Build the program
	dc.build_program('main.exe', ['main.d'])

	# Run the D program
	D.run_print('./main.exe')

'''
C#
'''
def csharp_compilers():
	csc = CS.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(csc._name))
	print("path: {0} ".format(csc._path))

	csc = CS.cs_compilers['dmcs']

	# Print the compiler name and path for fun
	print("name: {0}".format(csc._name))
	print("path: {0} ".format(csc._path))

def csharp_compiler_setup():
	# Get a C# compiler
	csc = CS.get_default_compiler()

	# Compiler setup
	csc.debug = True
	csc.optimize = True
	csc.warnings_all = True
	csc.warnings_as_errors = True

	# Print environmental variables to see what happens under the hood
	print("$CSC: {0}".format(csc.csc))
	print("$CSFLAGS: {0}".format(csc.csflags))

def csharp_building_program():
	# Get and setup the C# compiler
	csc = CS.get_default_compiler()
	csc.debug = True

	# Build the program
	csc.build_program('main.exe', ['main.cs'])

def csharp_building_library():
	# Get and setup the C# compiler
	csc = CS.get_default_compiler()
	csc.debug = True

	# Build the library
	csc.build_shared_library('math_helper.dll', ['math_helper.cs'])

def csharp_program_installation_and_uninstallation():
	# Get and setup the C# compiler
	csc = CS.get_default_compiler()
	csc.debug = True

	# Build the program
	csc.build_program('main.exe', ['main.cs'])

	# Install the program
	CS.install_program('main.exe', 'csharp_example')

	FS.remove_binaries('main')

	# Run the C# program from the system
	#FIXME: CS.run_print does not work on Linux, because when installed it runs 
	# the app from a shell script that does "mono blah.exe".
	#CS.run_print('main.exe')
	Process.run_print("main")

	# Uninstall the program
	CS.uninstall_program('main.exe', 'csharp_example')

def csharp_library_installation_and_uninstallation():
	# Get and setup the C# compiler
	csc = CS.get_default_compiler()
	csc.debug = True

	# Build the library
	csc.build_shared_library('math_helper.dll', ['math_helper.cs'])

	# Install the library
	CS.install_library('math_helper.dll', 'libmath_helper')

	# Uninstall the library
	CS.uninstall_library('math_helper.dll', 'libmath_helper')

def csharp_running_and_printing():
	# Get and setup the C# compiler
	csc = CS.get_default_compiler()
	csc.debug = True

	# Build the program
	csc.build_program('main.exe', ['main.cs'])

	# Run the C# program
	csc.run_print('main.exe')

'''
Java
'''
def java_compilers():
	javac = Java.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(javac._name))
	print("path: {0} ".format(javac._path))

	javac = Java.java_compilers['javac']

	# Print the compiler name and path for fun
	print("name: {0}".format(javac._name))
	print("path: {0} ".format(javac._path))

def java_compiler_setup():
	# Get a Java compiler
	javac = Java.get_default_compiler()

	# Compiler setup
	javac.debug = True
	javac.warnings = True
	javac.verbose = False
	javac.deprecation = True

	# Print environmental variables to see what happens under the hood
	print("$JAVAC: {0}".format(javac.javac))
	print("$JAR: {0}".format(javac.jar))
	print("$JAVA: {0}".format(javac.java))
	print("$JAVAFLAGS: {0}".format(javac.javaflags))

def java_building_program():
	# Get and setup the Java compiler
	javac = Java.get_default_compiler()
	javac.debug = True

	# Build the program
	javac.build_program('main.class', ['main.java'])

def java_building_library():
	# Get and setup the java compiler
	javac = Java.get_default_compiler()
	javac.debug = True

	# Build the library
	javac.build_jar('math_helper.jar', ['lib_math.java'])

def java_program_installation_and_uninstallation():
	# Get and setup the Java compiler
	javac = Java.get_default_compiler()
	javac.debug = True

	# Build the program
	javac.build_program('main.class', ['main.java'])

	# Install the program
	Java.install_program('main.class', 'java_example')

	FS.remove_binaries('main')

	# Run the Java program from the system
	#FIXME: Java.run_print does not work on Linux, because when installed it runs 
	# the app from a shell script that does "java blah".
	#Java.run_print('main')
	Process.run_print("main")

	# Uninstall the program
	Java.uninstall_program('main.class', 'java_example')

def java_library_installation_and_uninstallation():
	# Get and setup the Java compiler
	javac = Java.get_default_compiler()
	javac.debug = True

	# Build the jar
	javac.build_jar('lib_math.jar', ['lib_math.java'])

	# Install the jar
	Java.install_jar('lib_math.jar', 'lib_math')

	# Uninstall the jar
	Java.uninstall_jar('lib_math.jar', 'lib_math')

def java_running_and_printing():
	# Get and setup the Java compiler
	javac = Java.get_default_compiler()
	javac.debug = True

	# Build the program
	javac.build_program('main.class', ['main.java'])

	# Run the Java program
	javac.run_print('main')

'''
Users
'''

def users_running_as_root():
	# Print the user id
	print('Effective user id: {0}'.format(os.getuid()))

	# Will print an error and exit if the user is NOT root
	Users.require_root()

def users_running_as_a_normal_user():
	# Print the user id
	print('Effective user id: {0}'.format(os.getuid()))

	# Will print an error and exit if the user is root
	Users.require_not_root()

def users_privilege_escalation():
	# User id by default
	print('Effective user id: {0}'.format(os.geteuid()))

	# User id when running as a normal user
	def cb():
		print('Effective user id: {0}'.format(os.geteuid()))
	Users.do_as_normal_user(cb)

	# User id by default
	print('Effective user id: {0}'.format(os.geteuid()))

def users_user_name():
	import getpass
	print('Current user name: {0}'.format(getpass.getuser()))

	print('Normal user name: {0}'.format(Users.get_normal_user_name()))

def users_user_id():
	print('Current user id: {0}'.format(os.getuid()))

	print('Normal user id: {0}'.format(Users.get_normal_user_id()))

'''
Finding Programs, Libraries, and Headers Files
'''

def find_finding_programs():
	paths = Find.program_paths('gcc')
	print(paths)

def find_requiring_programs():
	Find.require_programs(['gcc'])

def find_finding_libraries():
	# SDL Library any version
	print(Find.get_static_library('libSDL'))
	print(Find.get_shared_library('libSDL'))

	# SDL Library at least version 1.2
	print(Find.get_shared_library('libSDL', 'ver >= (1, 2)'))

	# SDL Library of version 1.X
	print(Find.get_shared_library('libSDL', 'ver.major == 1'))

def find_requiring_libraries():
	# SDL Library any version
	Find.require_static_library('libSDL')
	Find.require_shared_library('libSDL')

	# SDL Library at least version 1.2
	Find.require_shared_library('libSDL', 'ver >= (1, 2)')

	# SDL Library of version 1.X
	Find.require_shared_library('libSDL', 'ver.major == 1')

def find_finding_headers():
	# SDL Library any version
	print(Find.get_header_file('libSDL'))

	# SDL Library at least version 1.2
	print(Find.get_header_file('libSDL', 'ver >= (1, 2)'))

	# SDL Library of version 1.X
	print(Find.get_header_file('libSDL', 'ver.major == 1'))

def find_requiring_headers():
	# SDL Library any version
	Find.require_header_file('libSDL')

	# SDL Library at least version 1.2
	Find.require_header_file('libSDL', 'ver >= (1, 2)')

	# SDL Library of version 1.X
	Find.require_header_file('libSDL', 'ver.major == 1')

def find_requiring_environmental_variable():
	# Require that PATH exists
	Find.require_environmental_variable('PATH')

def find_requiring_python_modules():
	# Require that os, sys, and platform are installed
	Python.require_python_modules(['os', 'sys', 'platform'])

'''
Concurrency
'''

def concurrency():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True

	# Tell Raise to start queueing the events after this function
	Process.concurrent_start()

	cc.build_object('main.o', ['main.c'])
	cc.build_object('libexample.o', ['libexample.c'])

	# Tell Raise to start running all the queued events concurrently
	Process.concurrent_end()

'''
CPU
'''

def cpu():
	print("Architechture: {0}".format(CPU.arch))
	print("Bits: {0}".format(CPU.bits))
	print("MHz: {0}".format(CPU.mhz))
	print("Name: {0}".format(CPU.name))
	print("Vendor Name: {0}".format(CPU.vendor_name))
	print("Flags: {0}".format(str.join(', ', CPU.flags)))
	print("Cores: {0}".format(CPU.cpus_total))

'''
Terminal
'''

def terminal_ok():
	Terminal.status("Looks like things will be okay")
	Terminal.ok()

def terminal_warning():
	Terminal.status("Looks like this may give a warning")
	Terminal.warning("Yep. Here is the warning")

def terminal_fail():
	Terminal.status("This may fail")
	Terminal.fail("Yep. Here is the fail message")


