#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import shutil
import lib_raise_c as C
import lib_raise_cxx as CXX
import lib_raise_d as D
import lib_raise_linker as Linker
import lib_raise_fs as FS
import lib_raise_libraries as Libraries
import lib_raise_os as OS
import lib_raise_process as Process


def cleanup():
	for entry in ['example', 'new_example']:
		if os.path.isdir(entry):
			shutil.rmtree(entry)

	if os.path.islink('example_link'):
		os.unlink('example_link')

	for entry in ['one', 'two', 'main', 'libsubtract.di']:
		if os.path.isfile(entry):
			os.remove(entry)

	for entry in ['libexample', 'libadd', 'libsubtract', 'main']:
		FS.remove_binaries(entry)

def setup():
	cleanup()

	open('one', 'a').close()
	os.mkdir('example')

'''
installation
'''

def installation():
	modules = []
	for root, dirs, files in os.walk('../../lib_raise'):
		for entry in files:
			if entry.endswith('.py'):
				modules.append(entry)

	modules.sort()

	print('.lib_raise-+')
	for module in modules[:-1]:
		print('           |-{0}'.format(module))
	print('           `-{0}'.format(modules[-1]))

'''
File Systems
'''

def fs_change_dir():
	FS.change_dir('example')

def fs_move_file():
	FS.move_file('one', 'two')

def fs_copy_file():
	FS.copy_file('one', 'two')

def fs_copy_new_file():
	FS.copy_new_file('one', 'two')

def fs_copy_dir():
	FS.copy_dir('example', 'new_example', symlinks = False)

def fs_make_dir():
	FS.make_dir('example', ignore_failure = True)

def fs_remove_dir():
	FS.remove_dir('example', and_children = True)

def fs_remove_file():
	FS.remove_file('does_not_exist', ignore_failure = True)

def fs_remove_binaries():
	FS.remove_binaries('main')

def fs_symlink():
	FS.symlink('example', 'example_link')

'''
 C
'''

def c_compilers():
	cc = C.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))

	cc = C.c_compilers['clang']

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))


def c_compiler_setup():
	# Get a C compiler
	cc = C.get_default_compiler()

	# Compiler setup
	cc.debug = True
	cc.optimize = True
	cc.warnings_all = True
	cc.warnings_as_errors = True
	cc.compile_time_flags = ['SDL=true']

	# Save the compiler config in environmental variables
	C.save_compiler(cc)

	# Print environmental variables to see what happens under the hood
	print("$CC: {0}".format(os.environ['CC']))
	print("$CFLAGS: {0}".format(os.environ['CFLAGS']))

def c_building_object():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the object
	C.build_object('main.o', ['main.c'])

def c_building_program():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the program
	C.build_program('main.exe', ['main.c'])

def c_building_shared_library():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the library
	C.build_object('libexample.o', ['libexample.c'])
	C.build_shared_library('libexample.so', ['libexample.o'])


def c_program_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the program
	C.build_program('main.exe', ['main.c'])

	# Install the program
	C.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the C program from the system
	C.run_print('main.exe')

	# Uninstall the program
	C.uninstall_program('main.exe')

def c_library_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the library
	C.build_object('libexample.o', ['libexample.c'])
	C.build_shared_library('libexample.so', ['libexample.o'])

	# Install the library
	C.install_library('libexample.so')

	# Uninstall the library
	C.uninstall_library('libexample.so')

def c_header_installation_and_uninstallation():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Install the header
	C.install_header('libexample.h')

	# Uninstall the header
	C.uninstall_header('libexample.h')

def c_running_and_printing():
	# Get and setup the C compiler
	cc = C.get_default_compiler()
	cc.debug = True
	C.save_compiler(cc)

	# Build the program
	C.build_program('main.exe', ['main.c'])

	# Run the C program
	C.run_print('./main.exe')

'''
 C++
'''

def cxx_compilers():
	cc = CXX.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))

	cc = CXX.cxx_compilers['g++']

	# Print the compiler name and path for fun
	print("name: {0}".format(cc._name))
	print("path: {0} ".format(cc._path))

def cxx_compiler_setup():
	# Get a C++ compiler
	cc = CXX.get_default_compiler()

	# Compiler setup
	cc.debug = True
	cc.optimize = True
	cc.warnings_all = True
	cc.warnings_as_errors = True
	cc.compile_time_flags = ['SDL=true']

	# Save the compiler config in environmental variables
	CXX.save_compiler(cc)

	# Print environmental variables to see what happens under the hood
	print("$CXX: {0}".format(os.environ['CXX']))
	print("$CXXFLAGS: {0}".format(os.environ['CXXFLAGS']))

def cxx_building_object():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the object
	CXX.build_object('main.o', ['main.cc'])

def cxx_building_program():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the program
	CXX.build_program('main.exe', ['main.cc'])

def cxx_building_shared_library():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the library
	CXX.build_object('libadd.o', ['libadd.cc'])
	CXX.build_shared_library('libadd.so', ['libadd.o'])


def cxx_program_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the program
	CXX.build_program('main.exe', ['main.cc'])

	# Install the program
	CXX.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the C++ program from the system
	CXX.run_print('main.exe')

	# Uninstall the program
	CXX.uninstall_program('main.exe')

def cxx_library_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the library
	CXX.build_object('libadd.o', ['libadd.cc'])
	CXX.build_shared_library('libadd.so', ['libadd.o'])

	# Install the library
	CXX.install_library('libadd.so')

	# Uninstall the library
	CXX.uninstall_library('libadd.so')

def cxx_header_installation_and_uninstallation():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Install the header
	CXX.install_header('libadd.h')

	# Uninstall the header
	CXX.uninstall_header('libadd.h')

def cxx_running_and_printing():
	# Get and setup the C++ compiler
	cc = CXX.get_default_compiler()
	cc.debug = True
	CXX.save_compiler(cc)

	# Build the program
	CXX.build_program('main.exe', ['main.cc'])

	# Run the C++ program
	CXX.run_print('./main.exe')

'''
 D
'''

def d_compilers():
	dc = D.get_default_compiler()

	# Print the compiler name and path for fun
	print("name: {0}".format(dc._name))
	print("path: {0} ".format(dc._path))

	dc = D.d_compilers['dmd']

	# Print the compiler name and path for fun
	print("name: {0}".format(dc._name))
	print("path: {0} ".format(dc._path))

def d_compiler_setup():
	# Get a D compiler
	dc = D.get_default_compiler()

	# Compiler setup
	dc.debug = True
	dc.optimize = True
	dc.warnings_all = True
	dc.warnings_as_errors = True
	dc.compile_time_flags = ['SDL=true']

	# Save the compiler config in environmental variables
	D.save_compiler(dc)

	# Print environmental variables to see what happens under the hood
	print("$DC: {0}".format(os.environ['DC']))
	print("$DFLAGS: {0}".format(os.environ['DFLAGS']))

def d_building_object():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the object
	D.build_object('main.o', ['main.d'])

def d_building_program():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the program
	D.build_program('main.exe', ['main.d'])

def d_building_library():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the library
	D.build_object('libsubtract.o', ['libsubtract.d'])
	D.build_static_library('libsubtract.a', ['libsubtract.o'])

def d_building_interface():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the interface
	D.build_interface('libsubtract.d')

def d_program_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the program
	D.build_program('main.exe', ['main.d'])

	# Install the program
	D.install_program('main.exe')

	FS.remove_binaries('main')

	# Run the D program from the system
	D.run_print('main.exe')

	# Uninstall the program
	D.uninstall_program('main.exe')

def d_library_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the library
	D.build_object('libsubtract.o', ['libsubtract.d'])
	D.build_static_library('libsubtract.a', ['libsubtract.o'])

	# Install the library
	D.install_library('libsubtract.a')

	# Uninstall the library
	D.uninstall_library('libsubtract.a')

def d_interface_installation_and_uninstallation():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the interface
	D.build_interface('libsubtract.d')

	# Install the interface
	D.install_interface('libsubtract.di')

	# Uninstall the interface
	D.uninstall_interface('libsubtract.di')

def d_running_and_printing():
	# Get and setup the D compiler
	dc = D.get_default_compiler()
	dc.debug = True
	D.save_compiler(dc)

	# Build the program
	D.build_program('main.exe', ['main.d'])

	# Run the D program
	D.run_print('./main.exe')

'''
OS
'''

def users_running_as_root():
	# Print the user id
	print('Effective user id: {0}'.format(os.getuid()))

	# Will print an error and exit if the user is NOT root
	OS.require_root()

def users_running_as_a_normal_user():
	# Print the user id
	print('Effective user id: {0}'.format(os.getuid()))

	# Will print an error and exit if the user is root
	OS.require_not_root()

def users_privilege_escalation():
	# User id by default
	print('Effective user id: {0}'.format(os.geteuid()))

	# User id when running as a normal user
	def cb():
		print('Effective user id: {0}'.format(os.geteuid()))
	OS.do_as_normal_user(cb)

	# User id by default
	print('Effective user id: {0}'.format(os.geteuid()))

def users_user_name():
	import getpass
	print('Current user name: {0}'.format(getpass.getuser()))

	print('Normal user name: {0}'.format(OS.get_normal_user_name()))

def users_user_id():
	print('Current user id: {0}'.format(os.getuid()))

	print('Normal user id: {0}'.format(OS.get_normal_user_id()))

'''
Finding Programs, Libraries, and Headers Files
'''

def find_finding_programs():
	paths = Libraries.program_paths('gcc')
	print(paths)

def find_requiring_programs():
	Libraries.require_programs(['gcc'])

def find_finding_libraries():
	# SDL Library any version
	print(Libraries.get_static_library('libSDL'))
	print(Libraries.get_shared_library('libSDL'))

	# SDL Library at least version 1.2
	print(Libraries.get_shared_library('libSDL', lambda ver: ver >= (1, 2)))

	# SDL Library of version 1.X
	print(Libraries.get_shared_library('libSDL', lambda ver: ver.major == 1))

def find_requiring_libraries():
	# SDL Library any version
	Libraries.require_static_library('libSDL')
	Libraries.require_shared_library('libSDL')

	# SDL Library at least version 1.2
	Libraries.require_shared_library('libSDL', lambda ver: ver >= (1, 2))

	# SDL Library of version 1.X
	Libraries.require_shared_library('libSDL', lambda ver: ver.major == 1)

def find_finding_headers():
	# SDL Library any version
	print(Libraries.get_header_file('libSDL'))

	# SDL Library at least version 1.2
	print(Libraries.get_header_file('libSDL', lambda ver: ver >= (1, 2)))

	# SDL Library of version 1.X
	print(Libraries.get_header_file('libSDL', lambda ver: ver.major == 1))

def find_requiring_headers():
	# SDL Library any version
	Libraries.require_header_file('libSDL')

	# SDL Library at least version 1.2
	Libraries.require_header_file('libSDL', lambda ver: ver >= (1, 2))

	# SDL Library of version 1.X
	Libraries.require_header_file('libSDL', lambda ver: ver.major == 1)

'''
Concurrency
'''

def concurrency():
	# After this function, events will start queueing
	Process.concurrent_start()

	for f in code_files:
		object_name = '{0}.o'.format(f)
		code_name = 'src/{0}.cc'.format(f)
		CXX.build_object(object_name, [code_name], ['-DSDL=true'])

	# After this it will start running events
	Process.concurrent_end()




