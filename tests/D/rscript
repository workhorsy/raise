#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import lib_raise_terminal as Print
import lib_raise_libraries as Libraries
import lib_raise_os as OS
import lib_raise_c as C
import lib_raise_d as D
import lib_raise_fs as FS


def clean():
	"""Removes any files and directories generated when building."""
	FS.remove_file('lib_math.di', ignore_failure = True)
	FS.remove_binaries('lib_math')
	FS.remove_binaries('main')

def _configure():
	dc = D.get_default_compiler()
	dc.debug = True
	dc.optimize = True
	dc.warnings_all = True
	dc.warnings_as_errors = True
	D.save_compiler(dc)

def setup_failure():
	# Empty the path and reset the D module so it finds no compilers
	os.environ['PATH'] = ''
	D.is_setup = False
	D.d_compilers = {}
	D.dc = None
	D.setup()

def build_object():
	clean()
	_configure()

	D.build_object('lib_math.o', ['lib_math.d'])
	D.build_object('main.o', ['main.d'])
	D.build_program('main.exe', ['main.o', 'lib_math.o'])

	D.run_say('./main.exe')

def build_program():
	clean()
	_configure()

	D.build_program('main.exe', ['main.d', 'lib_math.d'])

	D.run_say('./main.exe')

def build_static_library():
	clean()
	_configure()

	D.build_object('lib_math.o', ['lib_math.d'])
	D.build_static_library('lib_math.a', ['lib_math.o'])
	D.build_program('main.exe', ['main.d', 'lib_math.a'])

	D.run_say('./main.exe')

def build_interface():
	clean()
	_configure()

	D.build_interface('lib_math.d')

