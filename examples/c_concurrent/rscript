#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import lib_raise_c as C
import lib_raise_fs as FS
import lib_raise_find as Find
import lib_raise_users as Users
import lib_raise_process as Process


def clean():
	"""Removes any files and directories generated when building."""
	FS.remove_binaries('main')
	FS.remove_binaries('a')
	FS.remove_binaries('b')
	FS.remove_binaries('c')

def _configure():
	cc = C.get_default_compiler()
	cc.debug = True
	cc.optimize_level = 2
	cc.warnings_all = True
	cc.warnings_as_errors = True
	C.save_compiler(cc)

def build():
	"""Builds the program. Will only build files that have changed since the last build."""
	Users.require_not_root()
	_build()

def rebuild():
	"""Rebuilds the program. Will build all the files. Even if they have not changed since last build."""
	Users.require_not_root()
	clean()
	_build()

def _build():
	_configure()

	# Get the names of all the c++ files
	code_files = ['a', 'b', 'c', 'main']

	# Build each c++ file into an object
	# All the events between concurrent_start() and concurrent_end() will be run concurrently
	Process.concurrent_start()
	for f in code_files:
		object_name = '{0}.o'.format(f)
		code_name = '{0}.c'.format(f)
		C.build_object(object_name, [code_name])
	Process.concurrent_end()

	# Link all the objects into the program
	object_files = [s + '.o' for s in code_files]
	C.build_program('main.exe', object_files)

	# Run the program
	C.run_print('./main.exe')




