#!/usr/bin/env python
# -*- coding: UTF-8 -*-

require_module('C')

def clean():
	"""Removes any files and directories generated when building."""
	rmfile_f('raise_example')
	rmfile_f('libexample.o')
	rmfile_f('libexample.a')

def _configure():
	cc = c_get_default_compiler()
	cc.debug = True
	cc.optimize = True
	cc.warnings_all = True
	cc.warnings_as_errors = True
	c_save_compiler(cc)

def test():
	"""Builds the program, and runs it."""
	# Setup
	require_not_root()
	clean()
	_configure()

	# Build the library
	c_build_object('libexample.o', ['libexample.c'])
	ar_build_static_library('libexample.a', ['libexample.o'])

	# Build the program and link against the library
	c_build_program('raise_example', ['main.c'], ['libexample.a'])

	# Run the program
	run_say('./raise_example')

def _remove():
	rmfile_f('/usr/bin/raise_example')

def remove():
	"""Uninstalls the program."""
	# Setup
	require_root()
	clean()

	# Remove the files
	_remove()

	ldconfig()

def install():
	"""Installs the program."""
	# Setup
	require_root()
	clean()
	_configure()

	# Build as a normal user
	def actual_build():
		c_build_object('libexample.o', ['libexample.c'])
		ar_build_static_library('libexample.a', ['libexample.o'])
		c_build_program('raise_example', ['main.c'], ['libexample.a'])
	do_as_normal_user(actual_build)

	# Remove old install
	_remove()

	# Install
	cpfile('raise_example', '/usr/bin/raise_example')

	ldconfig()



