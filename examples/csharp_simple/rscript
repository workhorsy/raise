#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import lib_raise_csharp as CSharp
import lib_raise_fs as FS
import lib_raise_libraries as Libraries
import lib_raise_os as OS
import lib_raise_process as Process

def clean():
	"""Removes any files and directories generated when building."""
	FS.remove_binaries('lib_math_helper')
	FS.remove_binaries('main')

def _configure():
	csc = CSharp.get_default_compiler()
	csc.debug = True
	csc.optimize = True
	csc.warnings_all = True
	csc.warnings_as_errors = True
	CSharp.save_compiler(csc)

def test():
	"""Builds the program, and runs it."""
	# Setup
	OS.require_not_root()
	clean()
	_configure()

	# Build the library
	CSharp.build_shared_library('lib_math_helper.dll', ['math_helper.cs'])

	# Build the program
	CSharp.build_program('main.exe', ['main.cs'], ['-r:lib_math_helper.dll'])

	# Run the program
	CSharp.run_print('./main.exe')

def _remove():
	CSharp.uninstall_program('raise_example.exe', 'raise_example')
	CSharp.uninstall_library('lib_math_helper.dll', 'raise_example')

def remove():
	"""Uninstalls the program."""
	# Setup
	OS.require_root()
	clean()
	_configure()

	# Remove the old files
	_remove()

def install():
	"""Installs the program."""
	# Setup
	OS.require_root()
	clean()
	_configure()

	# Build as a normal user
	def actual_build():
		CSharp.build_shared_library('lib_math_helper.dll', ['math_helper.cs'])
		CSharp.build_program('raise_example.exe', ['main.cs'], ['-r:lib_math_helper.dll'])
	OS.do_as_normal_user(actual_build)

	# Remove old install
	_remove()

	# Install
	CSharp.install_program('raise_example.exe', 'raise_example')
	CSharp.install_library('lib_math_helper.dll', 'raise_example')



