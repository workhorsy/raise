#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import_module('C')
import_module('Linker')

def clean():
	"""Removes any files and directories generated when building."""
	rm_binaries('raise_example')
	rm_binaries('libexample')
	rm_binaries('main')

def _configure():
	cc = c_get_default_compiler()
	cc.debug = True
	cc.optimize = True
	cc.warnings_all = True
	cc.warnings_as_errors = True
	c_save_compiler(cc)

	linker = linker_get_default_linker()
	linker_save_linker(linker)

	os.environ['LD_LIBRARY_PATH'] = os.getcwd()

def test():
	"""Builds the program, and runs it."""
	# Setup
	require_not_root()
	clean()
	_configure()

	# Build the library
	c_build_object('libexample.o', ['libexample.c'])
	c_build_shared_library('libexample.so', ['libexample.o'])

	# Build the program and link against the library
	c_build_program(
			'raise_example.exe', 
			['main.c'], 
			[os.path.join('${LD_LIBRARY_PATH}', 'libexample.so')])

	# Run the program
	c_run_say('./raise_example.exe')

def _remove():
	rmfile_f('/usr/bin/raise_example')
	rmfile_f('/usr/lib/libexample.so')

def remove():
	"""Uninstalls the program."""
	# Setup
	require_root()
	clean()

	# Remove the old files
	_remove()

	ldconfig()

def install():
	"""Installs the program."""
	# Setup
	require_root()
	clean()
	_configure()

	# Build as a normal user
	def actual_build():
		c_build_object('libexample.o', ['libexample.c'])
		c_build_shared_library('libexample.so', ['libexample.o'])
		c_build_program('raise_example.exe', ['main.c'], ['libexample.so'])
	do_as_normal_user(actual_build)

	# Remove old install
	_remove()

	# Install
	cpfile('raise_example', '/usr/bin/raise_example')
	cpfile('libexample.so', '/usr/lib/libexample.so')

	ldconfig()







